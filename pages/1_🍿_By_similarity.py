import streamlit as st
import time

from streamlit_extras.app_logo import add_logo
from Methods import Methods as mtd

add_logo("logo.png",120)

#Page title
st.title("Generate the best movie/series recommendation that's similar to your favorite title.üçø",anchor=False)
st.divider()

submitted = False

#Text input for Movie/Series title
title = st.sidebar.text_input('Title', 'Avatar (2009)',help="""
                        The title of a Movie/Series that you want the recommendations to be similar to.
                        The released year is optional, but best to include it for search accuracy. 
                        E.g. Avatar (2009), The Matrix (1999), The Terminator (1984), etc.""")

#Text area for user's likings of the title
likings = st.sidebar.text_area(
"What do you like about it?",
"Great world building, beautiful environments, incredibly lifelike exotic creatures, "
"the imagery is visually, aurally and emotionally engulfing.",
max_chars=200, help="""Briefly state what you like about the given title. 
                        Include the characteristic or element from your given title (seperated with commas if multiple) 
                        that you want the recommendations to have.
                        E.g. "beautiful environments", "action packed", "high-stakes", etc.
                        """,placeholder="(Optional)")

#Radio button for recommendation type
type = st.sidebar.radio(
    "Recommendation type",
    ("Movie", "Series", "Both"),
    horizontal=True,
    help="Choose the entertainment type that you want the recommendation to be generated by.")

#Max amount of output
max = st.sidebar.slider('Max recommendation', 1, 10, 5,
                help="Pick the maximum amount of recommendation that you want to be generated.")

#Negative prompt checkboxes
with st.sidebar.expander("Negative prompt"):
    st.caption("What do you wish to exclude?")
    old = st.checkbox('is old')
    controv = st.checkbox('is controversial')
    noProf = st.checkbox('excesive profanity')
    noGore = st.checkbox('excesive violence')
    noNSFW = st.checkbox('contains NSFW scene')

#Submit button
if st.sidebar.button('Generate',use_container_width=True):
    st.toast('Submitted for generation...')
    if likings == "":
        likings = f"the characteristic or element similar to the {title}"
    with st.spinner('Generating recommendations, please wait... üçµ'):
        time.sleep(5)
        recommendation = mtd.generate_similarity(title,likings,type,max)
        if recommendation:
            submitted = True
            st.toast('Recommendations generated!')

#When submitted
if submitted:
    with st.expander("üìÉView as list"):
        list = "\n".join([f"{i+1}. {item}" for i, item in enumerate(recommendation)])
        st.write(list)
    for element in recommendation:
            parts = element.split(" (")
            t = parts[0]
            y = element[element.find("(")+1 : element.find(")")]
            data = mtd.getData(t,y)
            if data["Response"] == "True":
                if data["Poster"] == "N/A":
                    data["Poster"] = "https://www.reelviews.net/resources/img/default_poster.jpg"
                mtd.createComponent(
                data["Title"],
                data["Released"],
                data["imdbRating"],
                data["Poster"],
                data["Plot"],
                data["Type"],
                data["imdbID"],
                data["Director"],
                data["Genre"]
                )

    submitted = False